{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport PrimaryButton from \"../components/PrimaryButton\";\nimport { useState } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction StartGameScreen() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    enteredNumber = _useState2[0],\n    setEnteredNumber = _useState2[1];\n  function numberInputHandler(enteredText) {\n    setEnteredNumber(enteredText);\n  }\n  function resetInputHandler() {\n    setEnteredNumber('');\n  }\n  function confirmInputHandler() {\n    var chosenNumber = parseInt(enteredNumber);\n    if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\n      Alert.alert(\"Invalid Number!\", \"Number must be between 1 and 99\", {\n        text: \"Okay\",\n        style: 'destructive',\n        onPress: resetInputHandler\n      });\n      return;\n    }\n  }\n  return _jsxs(View, {\n    style: styles.inputContainer,\n    children: [_jsx(TextInput, {\n      style: styles.textInput,\n      maxLength: 2,\n      keyboardType: \"number-pad\",\n      autoCapitalize: \"none\",\n      autoCorrect: false,\n      value: enteredNumber,\n      onChangeText: numberInputHandler\n    }), _jsxs(View, {\n      style: styles.buttonContainer,\n      children: [_jsx(View, {\n        style: styles.buttonViewToStretch,\n        children: _jsx(PrimaryButton, {\n          onPress: resetInputHandler,\n          children: \"Reset\"\n        })\n      }), _jsx(View, {\n        style: styles.buttonViewToStretch,\n        children: _jsx(PrimaryButton, {\n          onPress: confirmInputHandler,\n          children: \"Confirm\"\n        })\n      })]\n    })]\n  });\n}\nexport default StartGameScreen;\nvar styles = StyleSheet.create({\n  inputContainer: {\n    marginHorizontal: 24,\n    padding: 16,\n    marginTop: 100,\n    backgroundColor: '#72063c',\n    borderRadius: 8,\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowColor: 6,\n    shadowOpacity: 0.4,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  textInput: {\n    height: 50,\n    width: 50,\n    fontSize: 32,\n    borderBottomColor: '#ddb52f',\n    borderBottomWidth: 2,\n    color: '#ddb52f',\n    marginVertical: 8,\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  buttonContainer: {\n    flexDirection: 'row'\n  },\n  buttonViewToStretch: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["PrimaryButton","useState","jsx","_jsx","jsxs","_jsxs","StartGameScreen","_useState","_useState2","_slicedToArray","enteredNumber","setEnteredNumber","numberInputHandler","enteredText","resetInputHandler","confirmInputHandler","chosenNumber","parseInt","isNaN","Alert","alert","text","style","onPress","View","styles","inputContainer","children","TextInput","textInput","maxLength","keyboardType","autoCapitalize","autoCorrect","value","onChangeText","buttonContainer","buttonViewToStretch","StyleSheet","create","marginHorizontal","padding","marginTop","backgroundColor","borderRadius","elevation","shadowColor","shadowOffset","width","height","shadowOpacity","justifyContent","alignItems","fontSize","borderBottomColor","borderBottomWidth","color","marginVertical","fontWeight","textAlign","flexDirection","flex"],"sources":["C:/Users/thegi/Downloads/starting-project/starting-project/screens/StartGameScreen.js"],"sourcesContent":["import { TextInput, View, StyleSheet, Alert } from \"react-native\"\r\nimport PrimaryButton from \"../components/PrimaryButton\"\r\nimport { useState } from \"react\"\r\n//magical! control the keyboard in the textInput\r\n//we need to put each button in it's own view. What does this do? it will apply new flexbox containes to each button and each container will have a flex direction of column and the button will be stretched for it's column\r\nfunction StartGameScreen(){\r\n    //catch user input with state!\r\n    //TextInput will always return a string, even though it's from a number-pad, so tell state to expect a string!\r\n    //bind the state to the text input by passing a pointer to it using value\r\n    const [enteredNumber, setEnteredNumber] = useState('');\r\n//do something with every keystroke!\r\n//react will invoke this func for every stroke since they're bound together\r\n    function numberInputHandler(enteredText){\r\n        setEnteredNumber(enteredText)\r\n    }\r\n\r\n    //this will run from our alert if the user enters wants to clear the field and choose a new num\r\n    function resetInputHandler(){\r\n        setEnteredNumber('')\r\n    }\r\n//connect the confirm button!\r\n//we need to check the current state, see if it's a num, and if it is greater than or equal to one and 99 or less\r\nfunction confirmInputHandler(){\r\n    //take the enteredNumber which is a string and turn it to a num\r\n    const chosenNumber = parseInt(enteredNumber);\r\n\r\n    //make sure that it is a num\r\n    if(isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99){\r\n        //alert user that they did not enter a number, or not the right number\r\n        //can also use Alert.prompt to start a dialogue\r\n        //creates a native alert dialogue built into IOS or Android\r\n        //takes 3 args!\r\n        Alert.alert(\"Invalid Number!\", \"Number must be between 1 and 99\", {text:\"Okay\", style:'destructive', onPress:resetInputHandler})\r\n        //cancel the exe if we got into the if and it fails\r\n        return\r\n    }\r\n}\r\n\r\n    return <View style={styles.inputContainer}>\r\n        <TextInput style={styles.textInput} maxLength={2} keyboardType=\"number-pad\" autoCapitalize=\"none\" autoCorrect={false} value={enteredNumber}\r\n        onChangeText={numberInputHandler}/>\r\n        <View style={styles.buttonContainer}> \r\n        <View style={styles.buttonViewToStretch}><PrimaryButton onPress={resetInputHandler\r\n        }>Reset</PrimaryButton></View>\r\n       <View style={styles.buttonViewToStretch}><PrimaryButton onPress={confirmInputHandler} >Confirm</PrimaryButton></View>\r\n        </View>\r\n    </View>\r\n}\r\n\r\nexport default StartGameScreen\r\n\r\nconst styles = StyleSheet.create({\r\n    //main view styles\r\n    inputContainer:{\r\n        marginHorizontal:24,\r\n        padding: 16,\r\n        marginTop:100,\r\n        backgroundColor:'#72063c',\r\n        borderRadius:8,\r\n        //want a shadow? add elevation for Android!\r\n        elevation:4,\r\n        //IOS box shadow:\r\n        shadowColor:'black', \r\n        shadowOffset:{width:0, height:2},\r\n        shadowColor:6,\r\n        shadowOpacity:0.4,\r\n        //positions on the cross axis\r\n        //main axis is center by default\r\n        justifyContent:'center',\r\n        alignItems:'center'\r\n    },\r\n    textInput:{\r\n        height:50,\r\n        width:50,\r\n        fontSize:32,\r\n        borderBottomColor:'#ddb52f',\r\n        borderBottomWidth:2,\r\n        color: '#ddb52f',\r\n        marginVertical:8,\r\n        fontWeight:'bold',\r\n        textAlign:'center',\r\n    },\r\n    buttonContainer:{\r\n        flexDirection:'row'\r\n    }, \r\n    buttonViewToStretch:{\r\n        flex:1\r\n    }\r\n    //could add bg color in app.json, but let's do it in App.js since it is our root!\r\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}