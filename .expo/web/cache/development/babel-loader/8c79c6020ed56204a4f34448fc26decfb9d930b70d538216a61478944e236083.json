{"ast":null,"code":"import View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction PrimaryButton(props) {\n  function pressHandler() {\n    console.log(\"clicked\");\n  }\n  return _jsx(View, {\n    style: styles.buttonOuterContainer,\n    children: _jsx(Pressable, {\n      style: function style(_ref) {\n        var pressed = _ref.pressed;\n        return pressed ? [styles.container, styles.pressed] : styles.container;\n      },\n      onPress: pressHandler,\n      android_ripple: {\n        color: \"grey\"\n      },\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: props.children\n      })\n    })\n  });\n}\nexport default PrimaryButton;\nvar styles = StyleSheet.create({\n  buttonOuterContainer: {\n    borderRadius: 28,\n    margin: 4,\n    overflow: 'hidden'\n  },\n  container: {\n    backgroundColor: \"white\",\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    elevation: 2\n  },\n  buttonText: {\n    color: 'black',\n    textAlign: 'center'\n  },\n  pressed: {\n    opacity: 0.75\n  }\n});","map":{"version":3,"names":["PrimaryButton","props","pressHandler","console","log","_jsx","View","style","styles","buttonOuterContainer","children","Pressable","_ref","pressed","container","onPress","android_ripple","color","Text","buttonText","StyleSheet","create","borderRadius","margin","overflow","backgroundColor","paddingVertical","paddingHorizontal","elevation","textAlign","opacity"],"sources":["C:/Users/thegi/Downloads/starting-project/starting-project/components/PrimaryButton.js"],"sourcesContent":["import {View, Text, Pressable, StyleSheet} from 'react-native'\r\n\r\n//we want our button to be reusable in each comp, so take props on it! \r\nfunction PrimaryButton(props){\r\n    function pressHandler(){\r\n        console.log(\"clicked\")\r\n    }\r\n    //pass an obj to the android ripple with the color for the ripple\r\n    //pressed is a bool we can use to determine which style objs to apply, we can pass in an arr of styles!\r\n    return (\r\n    <View style={styles.buttonOuterContainer}>\r\n          <Pressable style={({pressed}) => pressed ? [styles.container, styles.pressed] :  styles.container} onPress={pressHandler} android_ripple={{color:\"grey\"}}>\r\n        <Text style={styles.buttonText}>{props.children}</Text>\r\n        </Pressable>\r\n    </View>\r\n )\r\n}\r\n\r\nexport default PrimaryButton\r\n\r\nconst styles = StyleSheet.create({\r\n    //cont styling:\r\n    buttonOuterContainer:{\r\n        borderRadius:28,\r\n        margin:4,\r\n        // makes sure that any styling from inside, like the ripple, will be trapped in the cont\r\n        overflow:'hidden'\r\n    },\r\n    container:{\r\n        backgroundColor:\"white\",\r\n        paddingVertical:8,\r\n        paddingHorizontal:16,\r\n        //android shadow!\r\n        elevation:2,\r\n    },\r\n    buttonText:{\r\n        color:'black',\r\n        textAlign:'center'\r\n    },\r\n    pressed:{\r\n        opacity:0.75\r\n    }\r\n})"],"mappings":";;;;;AAGA,SAASA,aAAaA,CAACC,KAAK,EAAC;EACzB,SAASC,YAAYA,CAAA,EAAE;IACnBC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EAC1B;EAGA,OACAC,IAAA,CAACC,IAAI;IAACC,KAAK,EAAEC,MAAM,CAACC,oBAAqB;IAAAC,QAAA,EACnCL,IAAA,CAACM,SAAS;MAACJ,KAAK,EAAE,SAAAA,MAAAK,IAAA;QAAA,IAAEC,OAAO,GAAAD,IAAA,CAAPC,OAAO;QAAA,OAAMA,OAAO,GAAG,CAACL,MAAM,CAACM,SAAS,EAAEN,MAAM,CAACK,OAAO,CAAC,GAAIL,MAAM,CAACM,SAAS;MAAA,CAAC;MAACC,OAAO,EAAEb,YAAa;MAACc,cAAc,EAAE;QAACC,KAAK,EAAC;MAAM,CAAE;MAAAP,QAAA,EAC3JL,IAAA,CAACa,IAAI;QAACX,KAAK,EAAEC,MAAM,CAACW,UAAW;QAAAT,QAAA,EAAET,KAAK,CAACS;MAAQ,CAAO;IAAC,CAC5C;EAAC,CACV,CAAC;AAEX;AAEA,eAAeV,aAAa;AAE5B,IAAMQ,MAAM,GAAGY,UAAU,CAACC,MAAM,CAAC;EAE7BZ,oBAAoB,EAAC;IACjBa,YAAY,EAAC,EAAE;IACfC,MAAM,EAAC,CAAC;IAERC,QAAQ,EAAC;EACb,CAAC;EACDV,SAAS,EAAC;IACNW,eAAe,EAAC,OAAO;IACvBC,eAAe,EAAC,CAAC;IACjBC,iBAAiB,EAAC,EAAE;IAEpBC,SAAS,EAAC;EACd,CAAC;EACDT,UAAU,EAAC;IACPF,KAAK,EAAC,OAAO;IACbY,SAAS,EAAC;EACd,CAAC;EACDhB,OAAO,EAAC;IACJiB,OAAO,EAAC;EACZ;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}